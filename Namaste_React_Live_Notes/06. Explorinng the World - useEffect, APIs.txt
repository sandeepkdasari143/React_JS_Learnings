-> `useState` is used to create some local variables in out application.
-> We use local state to handle the changes in any part of the UI in react application.
-> If we want keep the UI to sync with the data, we use a STATE Variable.
-> Why React is FAST?
Ans: Virtual DOM, Reconcialation, and DIF Algorithm. => Virtual DOM is the representation
	of the real DOM.

-> React can only track the "state variables"., but not normal js variables, Because React is using the 
	virtual DOM to manipulate the UI. So, It can't be done by using the normal variables.
-> React is keeping track with the `useState` variable.
-> If that `useState` gets changes, the whole UI will be re -rendered and it updated the DOM and UI.
-> It will only update the content which depends on that particular `useState` variable.
-> It updates the required Node but re-render the whole Component.
 


Home Work:
-> Practice and explore the useEffect(()=>{},[])
-> Explore the world of APIs, Debugger and the Logic Building
-> Page Refresh => Component Renders -> useEffect() Called and executes some function. 
	=> Page Re-renders => Updates the UI usinf Reconcialation and DIF Algorithm. 
-> Make the Search Engine on your own.
-> Handle the Loading screen and return Skeleton Loading...
-> Early Returning the things which updates the UI.
-> Optional Chaining in API DATA and everywhere, use the "Optional Chaining"
-> 
-> Read about => fetch() API
-> Read about Microservices and Monolithic Architecture and 
	How are the microservices get connected?
-> CORS => Watch the Akshay Saini's CORS video in YT.
-> 







-> filter(()=>{})
-> const [stateVariable, functionToUpdateStatevariable] = useState()
-> useEffect(()=>{}, []) => Hook -> Function -> 2 params {Callback Function, Dependency Array}.

-> The callback function ()=>{}, present in the useEffect Hook, is called whenever useEffect() wants 
	to call it. i.e.,
-> Whenever our compoment render, after every render, the useEffect() is called. 
-> calling of the useEffect() can be controlled by the `second param` => "Dependency Array".
-> useEffect() is called "after every render".
-> when the useEffect() is written with an empty dependency array, will be called after the initial render.
-> when dependecy array [searchText] => once after the key change.
-> 
->
-> async...await 

-> Do optional chaining, whenever you are acquiring/ taking the data from any public API end point JSON.

-> How to write Fetch API in useEffect() and store the data into the Local state
	Variable using Optional Chaining?
Ans:- 

`const Body = () => {

	const [] = useState();
	const [] = useState();
	
	useEffect(()=>{
		getRestaurants();
	},[]);

	const getRestaurants = async() => {
		const data = await fetch("");
		const json = await data.json();
		console.log(json);
		
		//Use Optional Chaining to do safety-check.
		setRestaurants(json?.data?.cards[2]?.data?.data?.cards);
	}

	reuturn(
	<div> {restaurants.map((restaurant)=><RestaurantCard {...restaurant} key={restaurant.id}/> )} </div>
	)'

 




-> Conditional Rendering, Filtering the List for the Search Bar for the "FoodVilla" React Application.
-> Conditional Rendering of the UI,

JAVASCRIPT EXPRESSIONS works inside the JSX, but not the JAVASCRIPT STATEMENTS:
-> you can't run => { let a = 10; console.log(a); }
-> Instead write the JS Expression => { (let a=10, console.log(a) ) }
-> Basically, you can't write the `;` in any of the lines inside the JSX.

-> Example: Try out implementing Conditional Rendering by taking `isLogedInUser` example
   to conditionally render the `login` and `logout`.






























































 

























































