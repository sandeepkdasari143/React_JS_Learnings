-> We shouldn't write useState() in "Conditionals, For...Loops"
-> `useState()` is the hook that React gives you to create the local state variable inside your
	Functional Component. So Never use the `useState()` outside your Functional Component.

-> Always create the `useState()` inside your Functional Component.

-> Can I use more than one `useEffect()`s?  Ans=> Yes, you can :)

-> How do I import in my Component?
Ans=> Create `assets` and in that, You can put folder `images`.
	-> How would we use that Image, in our components?
	-> `import Logo from "../assets/images/foodvilla.png";
	-> `<img src={Logo} alt="" />`
-> CDN is the greate place to store and use the Images in the Development World.
-> "Read about CDN"


CLASS STARTS FROM HERE!
-> Create and Design your own 'Shimmer UI'!
-> Why do we need "key" prop in React? Do Research!
-> Use `formik` NPM Library to handle the Forms.

CHAPTER: REACT-ROUTER-DOM-V6
-> We will be Routing today, We will be creating routes for our Application.

-> NOTES ABOUT REACT ROUTER DOM V6 Here!

-> React Router DOM is very Powerfull, So that it catches it's routing errors and store them
	using `useRouteError` API/ function and can be shown in custom Route Error Page: 404 Not Found Page...

-> CODE:
`import { useRouterError } form 'react-router-dom';

const Error = () =>{
  const error = useRouterError();  		// `status` && `statustext` comes from this API.
  
  return(
	<div>
	  <h1>Oops!</h1>
	  <h1>Something went Wrong!</h1>
	  <h2>{error.status + " : " + error.statusText}</h2>
)}`


-> What is the problem with anchor tag `<a href="#">Link</a>`? 
Ans: It refreshes the whole entire page, very bad! In React, We hate Refreshing the page.
-> We are building the "Single Page Application" (SPA) => Earlier, in olden days, The wenbise always reloads for every `anchor tag`.
 Make Notes in depth to this Topic!

-> Types of Routing : 1. Client-Side Routing && 2. Server-Side Routing.

-> In React Application, We are going to build 'Client-Side Routing'.
-> We need to create Single Page Application and we shouldn't be 'Reload the entire Application".

-> Import `Link` from the 'react-router-dom' library, to replace the traditional 'anchor tag'.

Eg., `import {Link} from 'react-router-dom'
	<Link to="/home"><li>Home</li></Link>
	<li><Link to="/about">About</Link></li>`



-> In most of the time, In the most of the cases, We'll get an ERROR from the react application, => Read properties are not defined
	->Because, The page generally renders before the `useEffect`is called and get the data from `API Data`.
	->So, If there is no Data in the Local state Variable, then surely, the Error which has been mentioned
	above will occur i.e., `Read Properties are Not Defined`.
	-> SOLUTION FOR THIS NEVER-ENDING PROBLEM:
	-> We can solve this problem by doing two things:
	->They are: 1. Early Return => e.g., `if(!restaurant) return <Shimmer /> || <Skeleton />` 
				(OR) Use "Conditional Rendering" of the Component while "RETURNING" using "Ternary Operator (`?:`)".
			 2. Use the value `null` in the state variable to avoid this kind of Errors.
				e.g., `const [] = useState(null);`


-> {Array(10).fill("").map(()=>{return()})} //Creating The Fake Array to Loop through it to show Shimmer/ Skeletal Loader UI 10 Times.

-> RECAP && HOMEWORK:

-> We can create Multiple useEffect's...
-> "Formik" is the Library which helps us to build Forms...
-> Routing => Config Driven Routing, createBrowserRouter([]{})
-> React Router DOM V6 Stuff! (Outlet, Link, Dynamic Routing(:id), Nested Routes, useParams(), useRouterError())
-> `<RouteProvider router={} />` && `{useRouteError()}` and `errorElement: <NotFoundPage />`
-> Wrting Small Logic Into Components, Use Functional / Modular Programming Paradigm.(Readable, Maintainable, ReUsable, and Testable).
-> 
-> 

HOMEWORK: 
-> Build some SignUp and LogIn pages using "Formik" Library...
-> 
-> 
-> 

















































































